-- ELM-REVIEW ERROR ---------------------------------------- src/Main.elm:502:17

NoMissingTypeAnnotationInLetIn: Missing type annotation for `imageFiles`

501|             let
502|                 imageFiles =
                     ^^^^^^^^^^
503|                     List.filter (\f -> String.startsWith "image" f.mime) (file :: otherFiles)

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

──────────────────────────────────────────────────────────── src/Main.elm:505:17

NoMissingTypeAnnotationInLetIn: Missing type annotation for `names`

505|                 names =
                     ^^^^^
506|                     Set.fromList (List.map .name imageFiles)

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

──────────────────────────────────────────────────────────── src/Main.elm:535:17

NoMissingTypeAnnotationInLetIn: Missing type annotation for `newLoaded`

534|             let
535|                 newLoaded =
                     ^^^^^^^^^
536|                     case imageFromValue imgValue of

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

──────────────────────────────────────────────────────────── src/Main.elm:544:17

NoMissingTypeAnnotationInLetIn: Missing type annotation for
`updatedLoadingState`

544|                 updatedLoadingState =
                     ^^^^^^^^^^^^^^^^^^^
545|                     { names = names

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

──────────────────────────────────────────────────────────── src/Main.elm:549:17

NoMissingTypeAnnotationInLetIn: Missing type annotation for `oldParamsForm`

549|                 oldParamsForm =
                     ^^^^^^^^^^^^^
550|                     model.paramsForm

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

──────────────────────────────────────────────────────────── src/Main.elm:683:25

NoMissingTypeAnnotationInLetIn: Missing type annotation for `left`

683|                         left =
                             ^^^^
684|                             min x1 x2

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

──────────────────────────────────────────────────────────── src/Main.elm:686:25

NoMissingTypeAnnotationInLetIn: Missing type annotation for `top`

686|                         top =
                             ^^^
687|                             min y1 y2

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

──────────────────────────────────────────────────────────── src/Main.elm:689:25

NoMissingTypeAnnotationInLetIn: Missing type annotation for `right`

689|                         right =
                             ^^^^^
690|                             max x1 x2

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

──────────────────────────────────────────────────────────── src/Main.elm:692:25

NoMissingTypeAnnotationInLetIn: Missing type annotation for `bottom`

692|                         bottom =
                             ^^^^^^
693|                             max y1 y2

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

──────────────────────────────────────────────────────────── src/Main.elm:703:33

NoMissingTypeAnnotationInLetIn: Missing type annotation for `img`

702|                             let
703|                                 img =
                                     ^^^
704|                                     Pivot.getC (Pivot.goToStart images)

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

──────────────────────────────────────────────────────────── src/Main.elm:706:33

NoMissingTypeAnnotationInLetIn: Missing type annotation for `oldParams`

706|                                 oldParams =
                                     ^^^^^^^^^
707|                                     model.params

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

──────────────────────────────────────────────────────────── src/Main.elm:709:33

NoMissingTypeAnnotationInLetIn: Missing type annotation for `oldParamsForm`

709|                                 oldParamsForm =
                                     ^^^^^^^^^^^^^
710|                                     model.paramsForm

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

──────────────────────────────────────────────────────────── src/Main.elm:724:37

NoMissingTypeAnnotationInLetIn: Missing type annotation for `newCropForm`

723|                                 let
724|                                     newCropForm =
                                         ^^^^^^^^^^^
725|                                         snapBBox (BBox left top right bottom) oldParamsForm.crop

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

──────────────────────────────────────────────────────────── src/Main.elm:727:37

NoMissingTypeAnnotationInLetIn: Missing type annotation for `newCrop`

727|                                     newCrop =
                                         ^^^^^^^
728|                                         CropForm.decoded newCropForm

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

──────────────────────────────────────────────────────────── src/Main.elm:757:17

NoMissingTypeAnnotationInLetIn: Missing type annotation for `img`

756|             let
757|                 img =
                     ^^^
758|                     Pivot.getC (Pivot.goToStart images)

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

──────────────────────────────────────────────────────────── src/Main.elm:766:17

NoMissingTypeAnnotationInLetIn: Missing type annotation for `right`

766|                 right =
                     ^^^^^
767|                     left + model.viewer.scale * width

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

──────────────────────────────────────────────────────────── src/Main.elm:769:17

NoMissingTypeAnnotationInLetIn: Missing type annotation for `bottom`

769|                 bottom =
                     ^^^^^^
770|                     top + model.viewer.scale * height

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

──────────────────────────────────────────────────────────── src/Main.elm:772:17

NoMissingTypeAnnotationInLetIn: Missing type annotation for `oldParams`

772|                 oldParams =
                     ^^^^^^^^^
773|                     model.params

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

──────────────────────────────────────────────────────────── src/Main.elm:775:17

NoMissingTypeAnnotationInLetIn: Missing type annotation for `oldParamsForm`

775|                 oldParamsForm =
                     ^^^^^^^^^^^^^
776|                     model.paramsForm

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

──────────────────────────────────────────────────────────── src/Main.elm:786:21

NoMissingTypeAnnotationInLetIn: Missing type annotation for `newCropForm`

785|                 let
786|                     newCropForm =
                         ^^^^^^^^^^^
787|                         snapBBox (BBox left top right bottom) oldParamsForm.crop

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

──────────────────────────────────────────────────────────── src/Main.elm:789:21

NoMissingTypeAnnotationInLetIn: Missing type annotation for `newCrop`

789|                     newCrop =
                         ^^^^^^^
790|                         CropForm.decoded newCropForm

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

──────────────────────────────────────────────────────────── src/Main.elm:852:17

NoMissingTypeAnnotationInLetIn: Missing type annotation for `runStep`

851|             let
852|                 runStep =
                     ^^^^^^^
853|                     case ( model.runStep, step, progress ) of

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

──────────────────────────────────────────────────────────── src/Main.elm:885:17

NoMissingTypeAnnotationInLetIn: Missing type annotation for `newLogs`

884|             let
885|                 newLogs =
                     ^^^^^^^
886|                     logData :: model.seenLogs

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

──────────────────────────────────────────────────────────── src/Main.elm:896:17

NoMissingTypeAnnotationInLetIn: Missing type annotation for `newState`

895|             let
896|                 newState =
                     ^^^^^^^^
897|                     if logData.lvl == 0 then

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

─────────────────────────────────────────────────────────── src/Main.elm:1007:17

NoMissingTypeAnnotationInLetIn: Missing type annotation for `imgSize`

1006|             let
1007|                 imgSize =
                      ^^^^^^^
1008|                     Canvas.Texture.dimensions texture

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

──────────────────────────────────────────────────────────── src/Main.elm:1042:9

NoMissingTypeAnnotationInLetIn: Missing type annotation for `maxRight`

1041|     let
1042|         maxRight =
              ^^^^^^^^
1043|             -- Should never be Nothing

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

──────────────────────────────────────────────────────────── src/Main.elm:1046:9

NoMissingTypeAnnotationInLetIn: Missing type annotation for `maxBottom`

1046|         maxBottom =
              ^^^^^^^^^
1047|             -- Should never be Nothing

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

──────────────────────────────────────────────────────────── src/Main.elm:1050:9

NoMissingTypeAnnotationInLetIn: Missing type annotation for `leftCrop`

1050|         leftCrop =
              ^^^^^^^^
1051|             round (max 0 left)

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

──────────────────────────────────────────────────────────── src/Main.elm:1053:9

NoMissingTypeAnnotationInLetIn: Missing type annotation for `topCrop`

1053|         topCrop =
              ^^^^^^^
1054|             round (max 0 top)

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

──────────────────────────────────────────────────────────── src/Main.elm:1056:9

NoMissingTypeAnnotationInLetIn: Missing type annotation for `rightCrop`

1056|         rightCrop =
              ^^^^^^^^^
1057|             min (round right) maxRight

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

──────────────────────────────────────────────────────────── src/Main.elm:1059:9

NoMissingTypeAnnotationInLetIn: Missing type annotation for `bottomCrop`

1059|         bottomCrop =
              ^^^^^^^^^^
1060|             min (round bottom) maxBottom

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

─────────────────────────────────────────────────────────── src/Main.elm:1116:17

NoMissingTypeAnnotationInLetIn: Missing type annotation for `updatedField`

1115|             let
1116|                 updatedField =
                      ^^^^^^^^^^^^
1117|                     NumberInput.updateInt str paramsForm.maxVerbosity

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

─────────────────────────────────────────────────────────── src/Main.elm:1119:17

NoMissingTypeAnnotationInLetIn: Missing type annotation for `updatedForm`

1119|                 updatedForm =
                      ^^^^^^^^^^^
1120|                     { paramsForm | maxVerbosity = updatedField }

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

─────────────────────────────────────────────────────────── src/Main.elm:1134:17

NoMissingTypeAnnotationInLetIn: Missing type annotation for `updatedField`

1133|             let
1134|                 updatedField =
                      ^^^^^^^^^^^^
1135|                     NumberInput.updateInt str paramsForm.maxIterations

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

─────────────────────────────────────────────────────────── src/Main.elm:1137:17

NoMissingTypeAnnotationInLetIn: Missing type annotation for `updatedForm`

1137|                 updatedForm =
                      ^^^^^^^^^^^
1138|                     { paramsForm | maxIterations = updatedField }

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

─────────────────────────────────────────────────────────── src/Main.elm:1152:17

NoMissingTypeAnnotationInLetIn: Missing type annotation for `updatedField`

1151|             let
1152|                 updatedField =
                      ^^^^^^^^^^^^
1153|                     NumberInput.updateFloat str paramsForm.convergenceThreshold

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

─────────────────────────────────────────────────────────── src/Main.elm:1155:17

NoMissingTypeAnnotationInLetIn: Missing type annotation for `updatedForm`

1155|                 updatedForm =
                      ^^^^^^^^^^^
1156|                     { paramsForm | convergenceThreshold = updatedField }

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

─────────────────────────────────────────────────────────── src/Main.elm:1170:17

NoMissingTypeAnnotationInLetIn: Missing type annotation for `updatedField`

1169|             let
1170|                 updatedField =
                      ^^^^^^^^^^^^
1171|                     NumberInput.updateInt str paramsForm.levels

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

─────────────────────────────────────────────────────────── src/Main.elm:1173:17

NoMissingTypeAnnotationInLetIn: Missing type annotation for `updatedForm`

1173|                 updatedForm =
                      ^^^^^^^^^^^
1174|                     { paramsForm | levels = updatedField }

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

─────────────────────────────────────────────────────────── src/Main.elm:1188:17

NoMissingTypeAnnotationInLetIn: Missing type annotation for `updatedField`

1187|             let
1188|                 updatedField =
                      ^^^^^^^^^^^^
1189|                     NumberInput.updateFloat str paramsForm.sparse

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

─────────────────────────────────────────────────────────── src/Main.elm:1191:17

NoMissingTypeAnnotationInLetIn: Missing type annotation for `updatedForm`

1191|                 updatedForm =
                      ^^^^^^^^^^^
1192|                     { paramsForm | sparse = updatedField }

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

─────────────────────────────────────────────────────────── src/Main.elm:1206:17

NoMissingTypeAnnotationInLetIn: Missing type annotation for `updatedField`

1205|             let
1206|                 updatedField =
                      ^^^^^^^^^^^^
1207|                     NumberInput.updateFloat str paramsForm.lambda

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

─────────────────────────────────────────────────────────── src/Main.elm:1209:17

NoMissingTypeAnnotationInLetIn: Missing type annotation for `updatedForm`

1209|                 updatedForm =
                      ^^^^^^^^^^^
1210|                     { paramsForm | lambda = updatedField }

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

─────────────────────────────────────────────────────────── src/Main.elm:1224:17

NoMissingTypeAnnotationInLetIn: Missing type annotation for `updatedField`

1223|             let
1224|                 updatedField =
                      ^^^^^^^^^^^^
1225|                     NumberInput.updateFloat str paramsForm.rho

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

─────────────────────────────────────────────────────────── src/Main.elm:1227:17

NoMissingTypeAnnotationInLetIn: Missing type annotation for `updatedForm`

1227|                 updatedForm =
                      ^^^^^^^^^^^
1228|                     { paramsForm | rho = updatedField }

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

─────────────────────────────────────────────────────────── src/Main.elm:1242:17

NoMissingTypeAnnotationInLetIn: Missing type annotation for `newCropForm`

1241|             let
1242|                 newCropForm =
                      ^^^^^^^^^^^
1243|                     CropForm.toggle activeCrop paramsForm.crop

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

──────────────────────────────────────────────────────────── src/Main.elm:1276:9

NoMissingTypeAnnotationInLetIn: Missing type annotation for `params`

1275|     let
1276|         params =
              ^^^^^^
1277|             model.params

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

──────────────────────────────────────────────────────────── src/Main.elm:1279:9

NoMissingTypeAnnotationInLetIn: Missing type annotation for `paramsForm`

1279|         paramsForm =
              ^^^^^^^^^^
1280|             model.paramsForm

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

──────────────────────────────────────────────────────────── src/Main.elm:1282:9

NoMissingTypeAnnotationInLetIn: Missing type annotation for `newCropForm`

1282|         newCropForm =
              ^^^^^^^^^^^
1283|             updateSide paramsForm.crop

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

──────────────────────────────────────────────────────────── src/Main.elm:1285:9

NoMissingTypeAnnotationInLetIn: Missing type annotation for `newCrop`

1285|         newCrop =
              ^^^^^^^
1286|             CropForm.decoded newCropForm

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

──────────────────────────────────────────────────────────── src/Main.elm:1386:9

NoMissingTypeAnnotationInLetIn: Missing type annotation for `bgColor`

1385|     let
1386|         bgColor =
              ^^^^^^^
1387|             if msg == Nothing then

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

──────────────────────────────────────────────────────────── src/Main.elm:1411:9

NoMissingTypeAnnotationInLetIn: Missing type annotation for `otherAttributes`

1410|     let
1411|         otherAttributes =
              ^^^^^^^^^^^^^^^
1412|             if registeredImages == Nothing then

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

──────────────────────────────────────────────────────────── src/Main.elm:1424:9

NoMissingTypeAnnotationInLetIn: Missing type annotation for `logsState`

1423|     let
1424|         logsState =
              ^^^^^^^^^
1425|             logsStatus logs

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

──────────────────────────────────────────────────────────── src/Main.elm:1427:9

NoMissingTypeAnnotationInLetIn: Missing type annotation for `fillColor`

1427|         fillColor =
              ^^^^^^^^^
1428|             case logsState of

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

──────────────────────────────────────────────────────────── src/Main.elm:1441:9

NoMissingTypeAnnotationInLetIn: Missing type annotation for `otherAttributes`

1441|         otherAttributes =
              ^^^^^^^^^^^^^^^
1442|             case logsState of

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

──────────────────────────────────────────────────────────── src/Main.elm:1483:9

NoMissingTypeAnnotationInLetIn: Missing type annotation for
`progressBarRunButton`

1482|     let
1483|         progressBarRunButton =
              ^^^^^^^^^^^^^^^^^^^^
1484|             case model.runStep of

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

──────────────────────────────────────────────────────────── src/Main.elm:1494:9

NoMissingTypeAnnotationInLetIn: Missing type annotation for
`progressBarStopButton`

1494|         progressBarStopButton =
              ^^^^^^^^^^^^^^^^^^^^^
1495|             if model.runStep == StepNotStarted || model.runStep == StepDone then

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

──────────────────────────────────────────────────────────── src/Main.elm:1501:9

NoMissingTypeAnnotationInLetIn: Missing type annotation for
`progressBarSaveButton`

1501|         progressBarSaveButton =
              ^^^^^^^^^^^^^^^^^^^^^
1502|             if model.runStep == StepDone then

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

──────────────────────────────────────────────────────────── src/Main.elm:1524:9

NoMissingTypeAnnotationInLetIn: Missing type annotation for `hasNoError`

1523|     let
1524|         hasNoError =
              ^^^^^^^^^^
1525|             List.isEmpty (CropForm.errors paramsForm.crop)

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

──────────────────────────────────────────────────────────── src/Main.elm:1624:9

NoMissingTypeAnnotationInLetIn: Missing type annotation for `subprogress`

1623|     let
1624|         subprogress n nCount =
              ^^^^^^^^^^^
1625|             toFloat n / toFloat nCount

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

──────────────────────────────────────────────────────────── src/Main.elm:1627:9

NoMissingTypeAnnotationInLetIn: Missing type annotation for `lvlCount`

1627|         lvlCount =
              ^^^^^^^^
1628|             model.params.levels

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

──────────────────────────────────────────────────────────── src/Main.elm:1630:9

NoMissingTypeAnnotationInLetIn: Missing type annotation for `levelProgress`

1630|         levelProgress lvl =
              ^^^^^^^^^^^^^
1631|             subprogress (lvlCount - lvl - 1) lvlCount

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

──────────────────────────────────────────────────────────── src/Main.elm:1667:9

NoMissingTypeAnnotationInLetIn: Missing type annotation for `scaleX`

1666|     let
1667|         scaleX =
              ^^^^^^
1668|             "scaleX(" ++ String.fromFloat progressRatio ++ ")"

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

──────────────────────────────────────────────────────────── src/Main.elm:1781:9

NoMissingTypeAnnotationInLetIn: Missing type annotation for `thumbSize`

1780|     let
1781|         thumbSize =
              ^^^^^^^^^
1782|             32

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

──────────────────────────────────────────────────────────── src/Main.elm:1784:9

NoMissingTypeAnnotationInLetIn: Missing type annotation for `circle`

1784|         circle color size =
              ^^^^^^
1785|             [ Element.Border.color color

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

─────────────────────────────────────────────────────────── src/Main.elm:1823:17

NoMissingTypeAnnotationInLetIn: Missing type annotation for `color`

1822|             let
1823|                 color =
                      ^^^^^
1824|                     if verbosity == 0 then

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

─────────────────────────────────────────────────────────── src/Main.elm:1867:21

NoMissingTypeAnnotationInLetIn: Missing type annotation for `img`

1866|                 let
1867|                     img =
                          ^^^
1868|                         Pivot.getC images

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

─────────────────────────────────────────────────────────── src/Main.elm:1870:21

NoMissingTypeAnnotationInLetIn: Missing type annotation for `clickButton`

1870|                     clickButton alignment msg title icon =
                          ^^^^^^^^^^^
1871|                         Element.Input.button

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

─────────────────────────────────────────────────────────── src/Main.elm:1883:21

NoMissingTypeAnnotationInLetIn: Missing type annotation for `buttonsRow`

1883|                     buttonsRow =
                          ^^^^^^^^^^
1884|                         Element.row [ centerX ]

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

─────────────────────────────────────────────────────────── src/Main.elm:1906:21

NoMissingTypeAnnotationInLetIn: Missing type annotation for `canvasViewer`

1906|                     canvasViewer =
                          ^^^^^^^^^^^^
1907|                         Canvas.toHtml ( round viewerWidth, round viewerHeight )

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

─────────────────────────────────────────────────────────── src/Main.elm:1912:46

(fix) NoUnused.Parameters: Parameter `e` is not used.

1911|                             , msgOn "pointerdown" (Json.Decode.map (PointerMsg << PointerDownRaw) Json.Decode.value)
1912|                             , Pointer.onUp (\e -> PointerMsg (PointerUp))
                                                   ^
1913|                             , Html.Attributes.style "touch-action" "none"

You should either use this parameter somewhere, or remove it at the location I
pointed at.

──────────────────────────────────────────────────────────── src/Main.elm:2190:9

NoMissingTypeAnnotationInLetIn: Missing type annotation for `textField`

2189|     let
2190|         textField =
              ^^^^^^^^^
2191|             Element.Input.text [ Element.Border.width 0, Element.Font.center, width (Element.px 100) ]

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

─────────────────────────────────────────────────────────── src/Main.elm:2213:17

NoMissingTypeAnnotationInLetIn: Missing type annotation for `increased`

2212|             let
2213|                 increased =
                      ^^^^^^^^^
2214|                     field.increase current

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

─────────────────────────────────────────────────────────── src/Main.elm:2216:17

NoMissingTypeAnnotationInLetIn: Missing type annotation for `decreased`

2216|                 decreased =
                      ^^^^^^^^^
2217|                     field.decrease current

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

─────────────────────────────────────────────────────────── src/Main.elm:2219:17

NoMissingTypeAnnotationInLetIn: Missing type annotation for `decrementMsg`

2219|                 decrementMsg =
                      ^^^^^^^^^^^^
2220|                     case field.min of

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

─────────────────────────────────────────────────────────── src/Main.elm:2231:17

NoMissingTypeAnnotationInLetIn: Missing type annotation for `incrementMsg`

2231|                 incrementMsg =
                      ^^^^^^^^^^^^
2232|                     case field.max of

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

──────────────────────────────────────────────────────────── src/Main.elm:2253:9

NoMissingTypeAnnotationInLetIn: Missing type annotation for `textColor`

2252|     let
2253|         textColor =
              ^^^^^^^^^
2254|             if maybeMsg == Nothing then

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

──────────────────────────────────────────────────────────── src/Main.elm:2287:9

NoMissingTypeAnnotationInLetIn: Missing type annotation for `textField`

2286|     let
2287|         textField =
              ^^^^^^^^^
2288|             Element.Input.text [ Element.Border.width 0, Element.Font.center, width (Element.px 140) ]

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

─────────────────────────────────────────────────────────── src/Main.elm:2310:17

NoMissingTypeAnnotationInLetIn: Missing type annotation for `increased`

2309|             let
2310|                 increased =
                      ^^^^^^^^^
2311|                     field.increase current

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

─────────────────────────────────────────────────────────── src/Main.elm:2313:17

NoMissingTypeAnnotationInLetIn: Missing type annotation for `decreased`

2313|                 decreased =
                      ^^^^^^^^^
2314|                     field.decrease current

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

─────────────────────────────────────────────────────────── src/Main.elm:2316:17

NoMissingTypeAnnotationInLetIn: Missing type annotation for `decrementMsg`

2316|                 decrementMsg =
                      ^^^^^^^^^^^^
2317|                     case field.min of

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

─────────────────────────────────────────────────────────── src/Main.elm:2328:17

NoMissingTypeAnnotationInLetIn: Missing type annotation for `incrementMsg`

2328|                 incrementMsg =
                      ^^^^^^^^^^^^
2329|                     case field.max of

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

──────────────────────────────────────────────────────────── src/Main.elm:2371:9

NoMissingTypeAnnotationInLetIn: Missing type annotation for `pad`

2370|     let
2371|         pad =
              ^^^
2372|             3

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

──────────────────────────────────────────────────────────── src/Main.elm:2374:9

NoMissingTypeAnnotationInLetIn: Missing type annotation for `sliderSize`

2374|         sliderSize =
              ^^^^^^^^^^
2375|             toggleHeight - 2 * pad

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

──────────────────────────────────────────────────────────── src/Main.elm:2377:9

NoMissingTypeAnnotationInLetIn: Missing type annotation for `translation`

2377|         translation =
              ^^^^^^^^^^^
2378|             (toggleWidth - sliderSize - pad)

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

──────────────────────────────────────────────────────────── src/Main.elm:2421:9

NoMissingTypeAnnotationInLetIn: Missing type annotation for `img`

2420|     let
2421|         img =
              ^^^
2422|             Pivot.getC images

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

──────────────────────────────────────────────────────────── src/Main.elm:2424:9

NoMissingTypeAnnotationInLetIn: Missing type annotation for `clickButton`

2424|         clickButton alignment abled msg title icon =
              ^^^^^^^^^^^
2425|             let

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

─────────────────────────────────────────────────────────── src/Main.elm:2426:17

NoMissingTypeAnnotationInLetIn: Missing type annotation for `strokeColor`

2425|             let
2426|                 strokeColor =
                      ^^^^^^^^^^^
2427|                     if abled then

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

──────────────────────────────────────────────────────────── src/Main.elm:2445:9

NoMissingTypeAnnotationInLetIn: Missing type annotation for `modeButton`

2445|         modeButton selected msg title icon =
              ^^^^^^^^^^
2446|             let

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

──────────────────────────────────────────────────────────── src/Main.elm:2465:9

NoMissingTypeAnnotationInLetIn: Missing type annotation for `isMovingMode`

2465|         isMovingMode =
              ^^^^^^^^^^^^
2466|             case pointerMode of

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

──────────────────────────────────────────────────────────── src/Main.elm:2479:9

NoMissingTypeAnnotationInLetIn: Missing type annotation for `buttonsRow`

2479|         buttonsRow =
              ^^^^^^^^^^
2480|             Element.row [ width fill ]

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

──────────────────────────────────────────────────────────── src/Main.elm:2506:9

NoMissingTypeAnnotationInLetIn: Missing type annotation for `renderedBbox`

2506|         renderedBbox =
              ^^^^^^^^^^^^
2507|             case bboxDrawn of

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

─────────────────────────────────────────────────────────── src/Main.elm:2513:25

NoMissingTypeAnnotationInLetIn: Missing type annotation for `bboxWidth`

2512|                     let
2513|                         bboxWidth =
                              ^^^^^^^^^
2514|                             right - left

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

─────────────────────────────────────────────────────────── src/Main.elm:2516:25

NoMissingTypeAnnotationInLetIn: Missing type annotation for `bboxHeight`

2516|                         bboxHeight =
                              ^^^^^^^^^^
2517|                             bottom - top

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

─────────────────────────────────────────────────────────── src/Main.elm:2519:25

NoMissingTypeAnnotationInLetIn: Missing type annotation for `strokeWidth`

2519|                         strokeWidth =
                              ^^^^^^^^^^^
2520|                             viewer.scale * 2

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

──────────────────────────────────────────────────────────── src/Main.elm:2530:9

NoMissingTypeAnnotationInLetIn: Missing type annotation for `canvasViewer`

2530|         canvasViewer =
              ^^^^^^^^^^^^
2531|             Canvas.toHtml ( round viewerWidth, round viewerHeight )

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

─────────────────────────────────────────────────────────── src/Main.elm:2536:34

(fix) NoUnused.Parameters: Parameter `e` is not used.

2535|                 , msgOn "pointerdown" (Json.Decode.map (PointerMsg << PointerDownRaw) Json.Decode.value)
2536|                 , Pointer.onUp (\e -> PointerMsg (PointerUp))
                                       ^
2537|                 , Html.Attributes.style "touch-action" "none"

You should either use this parameter somewhere, or remove it at the location I
pointed at.

──────────────────────────────────────────────────────────── src/Main.elm:2582:9

NoMissingTypeAnnotationInLetIn: Missing type annotation for `coordinates`

2581|     let
2582|         coordinates =
              ^^^^^^^^^^^
2583|             Viewer.coordinatesAt event.mouseEvent.offsetPos viewer

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

──────────────────────────────────────────────────────────── src/Main.elm:2603:9

NoMissingTypeAnnotationInLetIn: Missing type annotation for `totalCount`

2602|     let
2603|         totalCount =
              ^^^^^^^^^^
2604|             Set.size names

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

──────────────────────────────────────────────────────────── src/Main.elm:2606:9

NoMissingTypeAnnotationInLetIn: Missing type annotation for `loadCount`

2606|         loadCount =
              ^^^^^^^^^
2607|             Dict.size loaded

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

──────────────────────────────────────────────────────────── src/Main.elm:2667:9

NoMissingTypeAnnotationInLetIn: Missing type annotation for `barLength`

2666|     let
2667|         barLength =
              ^^^^^^^^^
2668|             (325 - 2 * 4) * loaded // total

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

──────────────────────────────────────────────────────────── src/Main.elm:2704:9

NoMissingTypeAnnotationInLetIn: Missing type annotation for `borderStyle`

2703|     let
2704|         borderStyle =
              ^^^^^^^^^^^
2705|             case draggingState of

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

──────────────────────────────────────────────────────────── src/Main.elm:2712:9

NoMissingTypeAnnotationInLetIn: Missing type annotation for `dropOrLoadText`

2712|         dropOrLoadText =
              ^^^^^^^^^^^^^^
2713|             Element.row [ centerX ]

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

──────────────────────────────────────────────────────────── src/Main.elm:2729:9

NoMissingTypeAnnotationInLetIn: Missing type annotation for
`useDirectlyProvided`

2729|         useDirectlyProvided =
              ^^^^^^^^^^^^^^^^^^^
2730|             Element.paragraph [ centerX, Element.Font.center ]

Type annotations help you understand what happens in the code, and it will help
the compiler give better error messages.

─────────────────────────────────────────────────────────── src/Main.elm:2806:25

(fix) NoUnused.Parameters: Parameter `file` is not used.

2805|         (File.onDrop
2806|             { onOver = \file otherFiles -> DragDropMsg (DragOver)
                              ^^^^
2807|             , onDrop = \file otherFiles -> DragDropMsg (Drop file otherFiles)

You should either use this parameter somewhere, or remove it at the location I
pointed at.

─────────────────────────────────────────────────────────── src/Main.elm:2806:30

(fix) NoUnused.Parameters: Parameter `otherFiles` is not used.

2805|         (File.onDrop
2806|             { onOver = \file otherFiles -> DragDropMsg (DragOver)
                                   ^^^^^^^^^^
2807|             , onDrop = \file otherFiles -> DragDropMsg (Drop file otherFiles)

You should either use this parameter somewhere, or remove it at the location I
pointed at.

Errors marked with (fix) can be fixed automatically using `elm-review --fix`.

I found 106 errors in 1 file.
